name: main, dev github actions

# 어떤 조건에서 workflow를 실행할것인가.
on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]
permissions:
  contents: read

jobs:
  build:
    # runs-on은 github action의 CI서버 runner가 어떤 환경을 갖출지
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'main' || 'dev' }}
    # name(옵션)이름을 적어주고 uses나 run으로 어떤일을 할지 적는다.
    # uses는 이미 만들어져있는 것을 가져다쓰는 것, run은 직접 명령어를 적어주겠다
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name : Make application.properties
        run: |
          touch ./src/main/resources/application.properties
          echo "${{ secrets.PROPERTIES }}" > ./src/main/resources/application.properties

      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      # 테스트
      - name: Run Tests
        run: |
          ./gradlew test

      - name: Docker build & push to docker repo
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/${{ env.ENVIRONMENT == 'main' && secrets.DOCKER_REPO || secrets.DOCKER_REPO_DEV }}:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.ENVIRONMENT == 'main' && secrets.DOCKER_REPO || secrets.DOCKER_REPO_DEV }}:latest

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        id: deploy
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          envs: GITHUB_SHA
          script: |
            sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            sudo docker rm -f $(sudo docker ps -qa)
            sudo docker pull ${{ env.ENVIRONMENT == 'main' && secrets.DOCKER_REPO || secrets.DOCKER_REPO_DEV }}:latest
            cd ${{ secrets.DOCKER_COMPOSE_PATH }}
            sudo docker-compose up -d
            sudo docker image prune -f
