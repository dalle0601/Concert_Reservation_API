name: Publish Docker Image and Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]
permissions:
  contents: read

jobs:
  build:
    # runs-on은 github action의 CI서버 runner가 어떤 환경을 갖출지
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ap-northeast-2
      ECR_REPOSITORY: hhplus-main
      ECS_SERVICE: concert-main-service
      ECS_CLUSTER: main-cluster-hhplus-spring-main
      ECS_TASK_DEFINITION: task-definition-main.json
      CONTAINER_NAME: hhplus-main

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name : Make application.properties
        run: |
          touch ./src/main/resources/application.properties
          echo "${{ secrets.PROPERTIES }}" > ./src/main/resources/application.properties

      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      # 테스트
      - name: Run Tests
        run: |
          ./gradlew test

      - name: Docker build & push to docker repo
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/${{secrets.DOCKER_REPO}}:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{secrets.DOCKER_REPO }}:latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update ECS Task Definition
        run: |
          aws ecs register-task-definition \
            --region ${{ env.AWS_REGION }} \
            --cli-input-json file://${{ env.ECS_TASK_DEFINITION }}

      - name: Update ECS Service
        run: |
          aws ecs update-service \
            --region ${{ env.AWS_REGION }} \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --force-new-deployment
